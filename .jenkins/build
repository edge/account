#!/usr/bin/env groovy
// Copyright (C) 2022 Edge Network Technologies Limited
// Use of this source code is governed by a GNU GPL-style license
// that can be found in the LICENSE.md file. All rights reserved.

def buildAndPushImage(registryCredential, repository, buildArgs) {
  docker.withRegistry("https://registry.edge.network", registryCredential) {
    def image = docker.build("registry.edge.network/$repository", "--no-cache $buildArgs .")
    image.push()
  }
}

pipeline {
  agent {
    label 'local'
  }
  stages {
    stage('Build') {
      steps {
        script {
          withCredentials([
            usernamePassword(credentialsId: STRIPE_KEY, usernameVariable: 'STRIPE_PUBLISHABLE_KEY', passwordVariable: 'STRIPE_SECRET_KEY_UNUSED')
          ]) {
            buildAndPushImage(REGISTRY_CREDENTIAL, NAME, "--build-arg ACCOUNT_API_URL=$ACCOUNT_API_URL --build-arg CRISP_WEBSITE_ID=$CRISP_WEBSITE_ID --build-arg EXPLORER_URL=$EXPLORER_URL --build-arg GATEWAY_URL=$GATEWAY_URL --build-arg INDEX_URL=$INDEX_URL --build-arg PRODUCT_ID_PRIORITYSUPPORT=$PRODUCT_ID_PRIORITYSUPPORT --build-arg STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY")
          }
        }
      }
    }
  }
  post {
    success {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) has completed successfully", result: "SUCCESS", webhookURL: DISCORD_BUILD_WEBHOOK
      }
    }
    failure {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) has failed", result: "FAILURE", webhookURL: DISCORD_BUILD_WEBHOOK
      }
    }
    aborted {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) was aborted", result: "ABORTED", webhookURL: DISCORD_BUILD_WEBHOOK
      }
    }
  }
}
